Ques-1>  LINKED LIST
 A linked list is a linear data structure that includes a series of connected nodes. 
 linked lists are stored in a non-contiguous memory location. To add a new element, we just have to create a node somewhere in the memory and get it pointed by the   
 previous element. And deleting an element we just have to skip pointing to that particular node.

Structure of a Linked List:
 Every element in a linked list is called a node and consists of two parts, the data part, and the pointer part. The data part stores the value, while the pointer part 
 stores the pointer pointing to the address of the next node.
 Both of these structures (arrays and linked lists) are linear data structures

	
			ArrayList										LinkedList
* ArrayList internally uses a dynamic array to store its elements.		     * 	LinkedList uses Doubly Linked List to store its elements.
* Manipulating ArrayList takes more time due to the internal implementation.	     *	Manipulating LinkedList takes less time compared to ArrayList because, in a  
  Whenever we remove an element, internally, the array is traversed and the 		doubly-linked list, there is no concept of shifting the memory bits. The list  
  memory bits are shifted.								is traversed and the reference link is changed.
* ArrayList is faster in storing and accessing data.				     *  LinkedList is faster in manipulation of data. 	
* The memory location for the elements of an ArrayList is contiguous.		     *  The location for the elements of a linked list is not contagious.
	
1.Singly Linked List
  A singly linked list is a unidirectional linked list. We can only traverse it in one direction, i.e., from head node to tail node.
  
2.Doubly Linked List
  A doubly linked list is a bi-directional linked list. We can traverse it in both directions. Unlike singly linked lists, its nodes contain one extra pointer     
  called the previous pointer. This pointer points to the previous node.
  
3. Circular Linked List
   A circular linked list is either a singly or doubly linked list in which there are no NULL values. Here, we can implement the Circular Linked List by making the use 
   of Singly or Doubly Linked List. In the case of a singly linked list, the next of the last node contains the address of the first node and in case of a doubly- 
   linked list, the next of last node contains the address of the first node and prev of the first node contains the address of the last node.
   
   	
	Singly Linked List									Doubly Linked List
* The singly linked list can be traversed only in the forward direction.	* The doubly linked list can be accessed in both directions.
* When we want to save memory and do not need to perform searching,		* In case of better implementation, while searching, we prefer a doubly linked list.
  we prefer a singly linked list.
* A singly linked list consumes less memory as compared to the doubly		* The doubly linked list consumes more memory as compared to the singly linked list.
  linked list.
* It is less efficient as compared to a doubly-linked list.			* It is more efficient
* It can be implemented on the stack.						* It can be implemented on stack, heap and binary tree.
* In a singly linked list, the time complexity for inserting and		* In a doubly-linked list, the time complexity for inserting and deleting an element is 
  deleting an element from the list is O(n).					  O(1).
  
  Ques-2 Queue
  	 A queue is defined as a linear data structure that stores the elements sequentially. It is open at both ends and the operations are performed in First In 
	 First Out (FIFO) order. 
  	 EXAMPLE: The real-world example of a queue is the ticket queue outside a cinema hall, where the person who enters first in the queue gets the ticket first, 
	 and the last person enters in the queue gets the ticket at last. Similar approach is followed in the queue in data structure.
	 Element is inserted from one end called the REAR(also called tail), and the removal of existing element takes place from the other end called as FRONT
	 The process to add an element into queue is called Enqueue and the process of removal of an element from queue is called Dequeue.
	 Types of Queue
	 1. Simple Queue
	    The simple queue is a normal queue where insertion takes place at the FRONT of the queue and deletion takes place at the END of the queue.
	    The major drawback of using a linear Queue is that insertion is done only from the rear end. Suppose limit of the queue is 4. If the first three elements 
	    are deleted from the Queue, we cannot insert more elements even though the space is available in a Linear Queue. In this case, the linear Queue shows the 
	    overflow condition as the rear is pointing to the last element of the Queue.
	 2. Circular Queue
	    In a circular queue, the last node is connected to the first node.
	    Circular queue is also called as Ring Buffer.
	    Insertion in a circular queue happens at the FRONT and deletion at the END of the queue.
	    The main advantage of using the circular queue is better memory utilization.
	    EXAMPLE
	    Traffic system: In a computer-control traffic system, traffic light is one of the best examples of the circular queue. Each light of traffic light gets ON 
	    one by one after every jinterval of time. Like red light gets ON for one minute then yellow light for one minute and then green light. After green light, 
	    the red light gets ON.
	 3. Priority Queue
	    It is a special type of queue in which the elements are arranged based on the priority. It is a special type of queue data structure in which every element 
	    has a priority associated with it. Suppose some elements occur with the same priority, they will be arranged according to the FIFO principle.
	    Insertion in priority queue takes place based on the arrival, while deletion in the priority queue occurs based on the priority. Priority queue is mainly 
	    used to implement the CPU scheduling algorithms.
	 4. Deque (or, Double Ended Queue)
	    In Deque or Double Ended Queue, insertion and deletion can be done from both ends of the queue either from the front or rear.
	    Deque can be used both as stack and queue as it allows the insertion and deletion operations on both ends. Deque can be considered as stack because stack 
	    follows the LIFO (Last In First Out) principle in which insertion and deletion both can be performed only from one end. And in deque, it is possible to 
	    perform both insertion and deletion from one end, and Deque does not follow the FIFO principle.
